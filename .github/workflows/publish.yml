name: publish
on:
  push:
    tags:
    - v[0-9]+.[0-9]+.[0-9]+
jobs:
  publish:
    name: Publish ${{ matrix.build }}
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        build:
        - ubuntu-node14
        - ubuntu-node13
        - ubuntu-node12
        - ubuntu-node10
        - macos-node14
        - macos-node13
        - macos-node12
        - macos-node10
        - windows-node14
        - windows-node13
        - windows-node12
        - windows-node10
        include:
        - build: ubuntu-node14
          os: ubuntu-18.04
          node: 14
          env: { RUSTFLAGS: "-C target-cpu=haswell" }
        - build: ubuntu-node13
          os: ubuntu-18.04
          node: 13
          env: { RUSTFLAGS: "-C target-cpu=haswell" }
        - build: ubuntu-node12
          os: ubuntu-18.04
          node: 12
          env: { RUSTFLAGS: "-C target-cpu=haswell" }
        - build: ubuntu-node10
          os: ubuntu-18.04
          node: 10
          env: { RUSTFLAGS: "-C target-cpu=haswell" }
        # target-cpu=haswell causes libz_sys to fail compilation on macOS
        - build: macos-node14
          os: macos-latest
          node: 14
          env: {}
        - build: macos-node13
          os: macos-latest
          node: 13
          env: {}
        - build: macos-node12
          os: macos-latest
          node: 12
          env: {}
        - build: macos-node10
          os: macos-latest
          node: 10
          env: {}
        - build: windows-node14
          os: windows-2019
          node: 14
          env: { RUSTFLAGS: "-C target-cpu=haswell" }
        - build: windows-node13
          os: windows-2019
          node: 13
          env: { RUSTFLAGS: "-C target-cpu=haswell" }
        - build: windows-node12
          os: windows-2019
          node: 12
          env: { RUSTFLAGS: "-C target-cpu=haswell" }
        - build: windows-node10
          os: windows-2019
          node: 10
          env: { RUSTFLAGS: "-C target-cpu=haswell" }
      fail-fast: false

    steps:
    - name: Checkout the repo
      uses: actions/checkout@v2

    - name: Install Node
      uses: actions/setup-node@v1
      with:
        node-version: ${{ matrix.node }}

    - name: Install Rust
      uses: actions-rs/toolchain@v1
      with:
        toolchain: stable
        profile: minimal
        override: true

    # Windows fails on `yarn exec` with "Couldn't find the binary neon", calling node directly
    - name: Build the binary
      shell: bash
      env: ${{ matrix.env }}
      run: |
        yarn --ignore-scripts
        node node_modules/neon-cli/bin/cli.js build --release

        if which sha256sum; then
          SHA256="$(sha256sum native/index.node | awk '{ print $1 }')"
        elif which shasum; then # macOS
          SHA256="$(shasum -a 256 native/index.node | awk '{ print $1 }')"
        fi
        echo "SHA256 of native/index.node: ${SHA256:-N/A}"

    - name: Publish the binary
      shell: bash
      env:
        NODE_PRE_GYP_GITHUB_TOKEN: ${{ secrets.NODE_PRE_GYP_GITHUB_TOKEN }}
      run: |
        rm -rf native/target && yarn upload-binary || exit 0

  publish-alpine:
    name: Publish alpine-node${{ matrix.node }}
    runs-on: ubuntu-18.04
    strategy:
      matrix:
        node: [14, 13, 12, 10]
      fail-fast: false

    steps:
    - name: Checkout the repo
      uses: actions/checkout@v2

    - name: Build the binary
      run: |
        docker build --build-arg NODE_VERSION="${{ matrix.node }}" --build-arg RUSTFLAGS="-C target-cpu=haswell -C target-feature=-crt-static" -t nwp:${{ matrix.node }} -f .github/workflows/Dockerfile .

    - name: Publish the binary
      shell: bash
      run: |
        docker run --rm --env NODE_PRE_GYP_GITHUB_TOKEN="${{ secrets.NODE_PRE_GYP_GITHUB_TOKEN }}" nwp:${{ matrix.node }} yarn upload-binary || exit 0
